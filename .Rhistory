dplyr::select("value")
dados_pca <- data.frame(PC1 = PC1$value, PC2 = PC2$value)
# Eigenvetors
PCA$rotation[,1] %>%
broom::tidy() %>%
rename(variables = names, PC1 = x) %>%
knitr::kable()
PCA$rotation[,2] %>%
broom::tidy() %>%
rename(variables = names, PC2 = x) %>%
knitr::kable()
dados_pca <- dados_pca %>%
add_column(Stage = dados_1$stage)%>%
add_column(Forest_type = dados_1$forest.type)
dados_1[c(16:24)] %>%
decostand(method = "standardize") |> tibble::as_tibble()
filter(is.nan(dados_std))
is.nan(dados_std)
is.na(dados_std)
# PCA
dados_std |> filter(is.na(dados_std))
# PCA
dados_std[which(is.na(dados_std))]
# PCA
dados_std[which(is.nan(dados_std))]
is.nan(dados_std)
which(is.nan(dados_std))
# PCA
dados_std[which(is.nan(dados_std)),]
# PCA
dados_std[,which(is.nan(dados_std))]
# PCA
dados_std |> is.nan()
# PCA
dados_std |> unlist() |> is.nan()
# PCA
dados_std |> unlist() |> is.nan() |> filter(TRUE)
# PCA
dados_std |> unlist() |> is.nan() |> filter("TRUE")
# PCA
dados_std |> unlist() |> is.nan() |> contains("TRUE")
dados_std |> unlist() |> is.nan()
# PCA
dados_std |> contains("NAN")
# PCA
dados_std |> contains("NaN")
# PCA
dados_std |> contains(NaN)
# PCA
dados_std |> filter(NaN)
# PCA
dados_std |> filter(1,NaN)
dados_std <- dados_1[c(16:24)] %>%
decostand(method = "standardize") |> tibble::as_tibble() |> remove_missing()
diff(dados_std, dados_1)
Compare(dados_std, dados_1)
?Compare
dados_pca
dados_pca
dados_std
dados_1
dados_1 |> remove_missing()
dados_1
dados_1 |> is.infinite()
dados_std |> is.infinite()
dados_std
dados_std <- dados_1[c(16:24)] %>%
decostand(method = "standardize") |> tibble::as_tibble()
dados_std |> is.infinite()
dados_std |> unlist() |>  is.infinite()
dados_std |> unlist() |>  is.finite()
dados_std |> unlist() |>  is.finite() |> data.frame()
dados_std |> unlist() |>  is.finite() |> data.frame() |> colnames()
dados_std |> unlist() |>  is.finite() |> data.frame() |> filter(is.finite.unlist.dados_std.. == FALSE)
dados_1 |> select(plot_id, MAT)
dados_1 |> select(plot_id, MAT) |> range()
dados_1 |> select(plot_id, MAT) |> range(MAT)
dados_1 |> select(plot_id, MAT) filter(MAT == NA)
dados_1 |> select(plot_id, MAT) |> filter(is.na(MAT))
dados_1[c(16:24)] %>%
decostand(method = "standardize") |> tibble::as_tibble() |> filter(plot_id != 1024)
dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id)
dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id)
dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id) |>
filter(plot_id != 1024)
dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id) |>
filter(plot_id == 1024)
dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id) |>
filter(plot_id != 1024)
dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id) |> select(plot_id)
dados_std <- dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id) |>
filter(plot_id != 1024)
dados_std |> unlist() |>  is.finite() |> data.frame() |> filter(is.finite.unlist.dados_std.. == FALSE)
dados_1 |> unlist() |>  is.finite() |> data.frame() |> filter(is.finite.unlist.dados_std.. == FALSE)
dados_std
dados_std <- dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id) |>
filter(plot_id != 1024)
# PCA
PCA <- dados_std %>%
prcomp
PCA %>% summary
PC1 <- PCA %>%
broom::tidy() %>%
dplyr::filter(PC==1) %>%
dplyr::select("value")
PC2 <- PCA %>%
broom::tidy() %>%
dplyr::filter(PC==2) %>%
dplyr::select("value")
dados_pca <- data.frame(PC1 = PC1$value, PC2 = PC2$value)
# Eigenvetors
PCA$rotation[,1] %>%
broom::tidy() %>%
rename(variables = names, PC1 = x) %>%
knitr::kable()
PCA$rotation[,2] %>%
broom::tidy() %>%
rename(variables = names, PC2 = x) %>%
knitr::kable()
# Loadings
PCA %>% plot
dados_1 |> select(plot_id, MAT) |> filter(is.na(MAT))
dados_std <- dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id) |>
filter(plot_id != 1024)
dados_std %>%
prcomp
# PCA
PCA <- dados_std %>%
prcomp
PCA %>% summary
dados_std %>%
select(-plot_id)
# PCA
PCA <- dados_std %>%
select(-plot_id)
# PCA
PCA <- dados_std %>%
select(-plot_id) |>
prcomp
# PCA
PCA <- dados_std %>%
select(-plot_id) |>
prcomp()
PCA %>% summary
PC1 <- PCA %>%
broom::tidy() %>%
dplyr::filter(PC==1) %>%
dplyr::select("value")
PC2 <- PCA %>%
broom::tidy() %>%
dplyr::filter(PC==2) %>%
dplyr::select("value")
dados_pca <- data.frame(PC1 = PC1$value, PC2 = PC2$value)
# Eigenvetors
PCA$rotation[,1] %>%
broom::tidy() %>%
rename(variables = names, PC1 = x) %>%
knitr::kable()
PCA$rotation[,2] %>%
broom::tidy() %>%
rename(variables = names, PC2 = x) %>%
knitr::kable()
# Loadings
PCA %>% plot
dados_pca
dados_std$stage
dados_pca %>%
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))
dados_1 |> filter(plot_id != 1024)
dados_1 |> filter(plot_id != 1024) |> select(stage)
dados_pca %>%
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))
dados_1$stage[which(plot_id != 1024)]
dados_pca %>%
add_column(Stage = dados_1$stage[which(plot_id != 1024)])
dados_1
dados_1$stage
dados_1[which(plot_id != 1024),"stage"]
dados_1$plot_id
dados_1 |> class()
dados_pca %>%class()
dados_1 |> filter(plot_id != 1024)
dados_1 |> filter(plot_id != 1024) |> select(stage)
dados_pca %>%
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))
dados_pca %>%
as.tibble()
dados_pca %>%
as_tibble()
dados_pca %>%
as_tibble() |>
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))
dados_pca %>%
as_tibble() |>
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage)) |> print(n = 400)
dados_pca %>%
as_tibble() |>
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))%>%
add_column(Forest_type = dados_1 |> filter(plot_id != 1024) |> select(forest.type))
dados_pca %>%
as_tibble() |>
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))%>%
add_column(Forest_type = dados_1 |> filter(plot_id != 1024) |> select(forest.type)) |>
rename(Forest_type = Forest_tyoe$forest.type)
dados_pca %>%
as_tibble() |>
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))%>%
add_column(Forest_type = dados_1 |> filter(plot_id != 1024) |> select(forest.type)) |>
rename(Forest_type = Forest_type$forest.type)
dados_pca %>%
as_tibble() |>
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))%>%
add_column(Forest_type = dados_1 |> filter(plot_id != 1024) |> select(forest.type)) |>
rename(Forest_type = "Forest_type$forest.type")
dados_pca %>%
as_tibble() |>
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))%>%
add_column(Forest_type = dados_1 |> filter(plot_id != 1024) |> select(forest.type))
dados_pca <- dados_pca %>%
as_tibble() |>
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))%>%
add_column(Forest_type = dados_1 |> filter(plot_id != 1024) |> select(forest.type))
loadings <- as.data.frame(PCA$rotation)
scores <- as.data.frame(PCA$x)
label <- rownames(loadings)
ggplot()+
geom_jitter(data = dados_pca,
aes(x = PC1, y = PC2, color = factor(Stage), shape = Forest_type),
show.legend = T) +
scale_color_manual(values = c("orange2", "brown")) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = 10*PC1, yend = 10*PC2, alpha = 0.8),
arrow = arrow(length = unit(0.7, "cm")), show.legend = F, color = "red")
ggplot()+
geom_point(data = dados_pca,
aes(x = PC1, y = PC2, color = factor(Stage), shape = Forest_type),
show.legend = T)
dados_pca
ggplot()+
geom_point(data = dados_pca,
aes(x = PC1, y = PC2, color = factor(Stage$stage), shape = Forest_type$forest.type),
show.legend = T) +
scale_color_manual(values = c("orange2", "brown"))
# Faz um biplot
pca_plot <- ggplot()+
geom_point(data = dados_pca,
aes(x = PC1, y = PC2, shape = factor(Stage$stage), color = Forest_type$forest.type),
show.legend = T) +
scale_color_manual(values = c("purple", "green3", "orange")) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = 10*PC1, yend = 10*PC2, alpha = 0.8),
arrow = arrow(length = unit(0.7, "cm")), show.legend = F, color = "red") +
geom_text(data = loadings, aes(x = 10*PC1, y = 10*PC2, label = label), color = "black", size = 4, nudge_x = 0.03, nudge_y = 0.04) +
xlab("PC1 (28 %)") +
ylab("PC2 (27.5 %)") +
ggtitle("PCA of environmental variables")+
guides(alpha = "none")+
labs(shape = "Stage",
color = "Forest Type",
alpha = NULL) +
theme(legend.position = c(0.82, 0.83))
pca_plot
# Faz um biplot
pca_plot <- ggplot()+
geom_point(data = dados_pca,
aes(x = PC1, y = PC2, shape = factor(Stage$stage), color = Forest_type$forest.type),
show.legend = T) +
scale_color_manual(values = c("purple", "green3", "orange")) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = 10*PC1, yend = 10*PC2, alpha = 0.8),
arrow = arrow(length = unit(0.7, "cm")), show.legend = F, color = "red") +
geom_text(data = loadings, aes(x = 10*PC1, y = 10*PC2, label = label), color = "black", size = 4, nudge_x = 0.03, nudge_y = 0.04) +
xlab("PC1 (28 %)") +
ylab("PC2 (27.5 %)") +
ggtitle("PCA of environmental variables")+
guides(alpha = "none")+
labs(shape = "Stage",
color = "Forest Type",
alpha = NULL)# +
pca_plot
dados_1 |> filter(plot_id != 1024) |>  add_column(PC1 = dados_pca$PC1)
lm(mean_evi2 ~ PC1, data = dados_1 |> filter(plot_id != 1024) |>  add_column(PC1 = dados_pca$PC1))
lm(mean_evi2 ~ PC1, data = dados_1 |> filter(plot_id != 1024) |>  add_column(PC1 = dados_pca$PC1)) |> summary()
glimpse(env)
read_csv("preditores.csv")
read_csv("preditores.csv")
lm(mean_evi2 ~ PC1, data = dados_1 |> filter(plot_id != 1024) |>  add_column(PC1 = dados_pca$PC1)) |> summary()
lm(mean_evi2 ~ elevation, data = dados_1)) |> summary()
lm(mean_evi2 ~ elevation, data = dados_1) |> summary()
lm(mean_evi2 ~ CEC, data = dados_1) |> summary()
lm(mean_evi2 ~ N, data = dados_1) |> summary()
lm(mean_evi2 ~ rainfall_seasonality, data = dados_1) |> summary()
lm(mean_evi2 ~ MAP, data = dados_1) |> summary()
lm(mean_evi2 ~ MAT, data = dados_1) |> summary()
lm(mean_evi2 ~ PC1, data = dados_1 |> filter(plot_id != 1024) |>  add_column(PC1 = dados_pca$PC1)) |> plot()
plot(mean_evi2 ~ elevation, data = dados_1) |> summary()
plot(mean_evi2 ~ elevation, data = dados_1)
plot(mean_evi2 ~ elevation, data = dados_1, col = factor(forest_type))
plot(mean_evi2 ~ elevation, data = dados_1, col = factor(forest.type))
plot(mean_evi2 ~ CEC, data = dados_1, col = factor(forest.type))
plot(mean_evi2 ~ rainfall_seasonality, data = dados_1, col = factor(forest.type))
plot(mean_evi2 ~ MAP, data = dados_1, col = factor(forest.type))
plot(mean_evi2 ~ MAT, data = dados_1, col = factor(forest.type))
plot(mean_evi2 ~ sand, data = dados_1, col = factor(forest.type))
plot(mean_evi2 ~ clay, data = dados_1, col = factor(forest.type))
plot(mean_evi2 ~ fire_freq, data = dados_1, col = factor(forest.type))
dados_1 |> ggplot(aes(y = fire_freq, x = forest.type))+
geom_boxplot()
dados_1 |> ggplot(aes(y = rainfall_seasonality, x = forest.type))+
geom_boxplot()
dados_1 |> ggplot(aes(y = fire_freq, x = forest.type))+
geom_boxplot()/
dados_1 |> ggplot(aes(y = rainfall_seasonality, x = forest.type))+
geom_boxplot()
dados_1 |> ggplot(aes(y = fire_freq, x = forest.type))+
geom_boxplot()/dados_1 |> ggplot(aes(y = rainfall_seasonality, x = forest.type))+
geom_boxplot()
library(patchwork)
dados_1 |> ggplot(aes(y = fire_freq, x = forest.type))+
geom_boxplot()/dados_1 |> ggplot(aes(y = rainfall_seasonality, x = forest.type))+
geom_boxplot()
/
dados_1 |> ggplot(aes(y = fire_freq, x = forest.type))+
geom_boxplot()+dados_1 |> ggplot(aes(y = rainfall_seasonality, x = forest.type))+
geom_boxplot()
dados_1 |> ggplot(aes(y = fire_freq, x = forest.type))+
geom_boxplot()+dados_1 |> ggplot(aes(y = rainfall_seasonality, x = forest.type))+
geom_boxplot()+dados_1 |> ggplot(aes(y = elevation, x = forest.type))+
geom_boxplot()
rds(pca_plot)
theme(legend.position = "bottom")
pca_plot
# Faz um biplot
pca_plot <- ggplot()+
geom_point(data = dados_pca,
aes(x = PC1, y = PC2, shape = factor(Stage$stage), color = Forest_type$forest.type),
show.legend = T) +
scale_color_manual(values = c("purple", "green3", "orange")) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = 10*PC1, yend = 10*PC2, alpha = 0.8),
arrow = arrow(length = unit(0.7, "cm")), show.legend = F, color = "red") +
geom_text(data = loadings, aes(x = 10*PC1, y = 10*PC2, label = label), color = "black", size = 4, nudge_x = 0.03, nudge_y = 0.04) +
xlab("PC1 (28 %)") +
ylab("PC2 (27.5 %)") +
ggtitle("PCA of environmental variables")+
guides(alpha = "none")+
labs(shape = "Stage",
color = "Forest Type",
alpha = NULL) +
theme(legend.position = "bottom")
pca_plot
dados_std <- dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id) |>
add_column(lon = dados_1$longitude) |>
add_column(lat = dados_1$latitude)
dados_std <- dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id) |>
add_column(lon = dados_1$longitude) |>
add_column(lat = dados_1$latitude) |>
filter(plot_id != 1024)
# PCA
PCA <- dados_std %>%
select(-plot_id) |>
prcomp()
PCA %>% summary
PC1 <- PCA %>%
broom::tidy() %>%
dplyr::filter(PC==1) %>%
dplyr::select("value")
PC2 <- PCA %>%
broom::tidy() %>%
dplyr::filter(PC==2) %>%
dplyr::select("value")
dados_pca <- data.frame(PC1 = PC1$value, PC2 = PC2$value)
# Eigenvetors
PCA$rotation[,1] %>%
broom::tidy() %>%
rename(variables = names, PC1 = x) %>%
knitr::kable()
PCA$rotation[,2] %>%
broom::tidy() %>%
rename(variables = names, PC2 = x) %>%
knitr::kable()
dados_pca <- dados_pca %>%
as_tibble() |>
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))%>%
add_column(Forest_type = dados_1 |> filter(plot_id != 1024) |> select(forest.type))
loadings <- as.data.frame(PCA$rotation)
scores <- as.data.frame(PCA$x)
label <- rownames(loadings)
# Faz um biplot
pca_plot <- ggplot()+
geom_point(data = dados_pca,
aes(x = PC1, y = PC2, shape = factor(Stage$stage), color = Forest_type$forest.type),
show.legend = T) +
scale_color_manual(values = c("purple", "green3", "orange")) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = 10*PC1, yend = 10*PC2, alpha = 0.8),
arrow = arrow(length = unit(0.7, "cm")), show.legend = F, color = "red") +
geom_text(data = loadings, aes(x = 10*PC1, y = 10*PC2, label = label), color = "black", size = 4, nudge_x = 0.03, nudge_y = 0.04) +
xlab("PC1 (28 %)") +
ylab("PC2 (27.5 %)") +
ggtitle("PCA of environmental variables")+
guides(alpha = "none")+
labs(shape = "Stage",
color = "Forest Type",
alpha = NULL) +
theme(legend.position = "bottom")
pca_plot
dados_std <- dados_1[c(16:24)] %>%
decostand(method = "standardize") |>
tibble::as_tibble() |>
add_column(plot_id = dados_1$plot_id) |>
filter(plot_id != 1024)
# PCA
PCA <- dados_std %>%
select(-plot_id) |>
prcomp()
PCA %>% summary
PC1 <- PCA %>%
broom::tidy() %>%
dplyr::filter(PC==1) %>%
dplyr::select("value")
PC2 <- PCA %>%
broom::tidy() %>%
dplyr::filter(PC==2) %>%
dplyr::select("value")
dados_pca <- data.frame(PC1 = PC1$value, PC2 = PC2$value)
# Eigenvetors
PCA$rotation[,1] %>%
broom::tidy() %>%
rename(variables = names, PC1 = x) %>%
knitr::kable()
PCA$rotation[,2] %>%
broom::tidy() %>%
rename(variables = names, PC2 = x) %>%
knitr::kable()
dados_pca <- dados_pca %>%
as_tibble() |>
add_column(Stage = dados_1 |> filter(plot_id != 1024) |> select(stage))%>%
add_column(Forest_type = dados_1 |> filter(plot_id != 1024) |> select(forest.type))
loadings <- as.data.frame(PCA$rotation)
scores <- as.data.frame(PCA$x)
label <- rownames(loadings)
# Faz um biplot
pca_plot <- ggplot()+
geom_point(data = dados_pca,
aes(x = PC1, y = PC2, shape = factor(Stage$stage), color = Forest_type$forest.type),
show.legend = T) +
scale_color_manual(values = c("purple", "green3", "orange")) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = 10*PC1, yend = 10*PC2, alpha = 0.8),
arrow = arrow(length = unit(0.7, "cm")), show.legend = F, color = "red") +
geom_text(data = loadings, aes(x = 10*PC1, y = 10*PC2, label = label), color = "black", size = 4, nudge_x = 0.03, nudge_y = 0.04) +
xlab("PC1 (28 %)") +
ylab("PC2 (27.5 %)") +
ggtitle("PCA of environmental variables")+
guides(alpha = "none")+
labs(shape = "Stage",
color = "Forest Type",
alpha = NULL) +
theme(legend.position = "bottom")
pca_plot
png("Fig_6.png", res = 300, height = 1990, width = 2500)
pca_plot
dev.off()
PCA %>% summary
# Faz um biplot
pca_plot <- ggplot()+
geom_point(data = dados_pca,
aes(x = PC1, y = PC2, shape = factor(Stage$stage), color = Forest_type$forest.type),
show.legend = T) +
scale_color_manual(values = c("purple", "green3", "orange")) +
geom_segment(data = loadings, aes(x = 0, y = 0, xend = 10*PC1, yend = 10*PC2, alpha = 0.8),
arrow = arrow(length = unit(0.7, "cm")), show.legend = F, color = "red") +
geom_text(data = loadings, aes(x = 10*PC1, y = 10*PC2, label = label), color = "black", size = 4, nudge_x = 0.03, nudge_y = 0.04) +
xlab("PC1 (37.27 %)") +
ylab("PC2 (19.68 %)") +
ggtitle("PCA of environmental variables")+
guides(alpha = "none")+
labs(shape = "Stage",
color = "Forest Type",
alpha = NULL) +
theme(legend.position = "bottom")
png("Fig_6.png", res = 300, height = 1990, width = 2500)
pca_plot
dev.off()
